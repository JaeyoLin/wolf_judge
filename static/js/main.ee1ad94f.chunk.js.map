{"version":3,"sources":["components/Setting/Setting.js","components/Home/Home.js","locales/index.js","App.js","serviceWorker.js","index.js"],"names":["Setting","t","useTranslation","useState","playerNumber","setPlayerNumber","wolfNumber","setWolfNumber","isUsePredictor","setIsUsePredictor","isUseWitch","setIsUseWitch","isUseHunter","setIsUseHunter","TextField","label","value","onChange","e","target","margin","InputLabel","htmlFor","Select","color","native","inputProps","name","Button","useStyles","makeStyles","theme","container","paddingLeft","paddingRight","toolbar","mixins","drawer","width","drawerPaper","root","flexGrow","menuButton","marginRight","spacing","title","list","fullList","Home","props","isOpenDrawer","setIsOpenDrawer","i18n","classes","toggleDrawer","isOpen","event","type","key","Container","maxWidth","className","Typography","component","style","backgroundColor","height","AppBar","position","Toolbar","IconButton","edge","aria-label","onClick","variant","changeLanguage","id","Drawer","anchor","open","onClose","paper","Divider","List","ListItem","button","ListItemIcon","ListItemText","primary","use","initReactI18next","init","resources","translations","enUS","zhTW","lng","localStorage","getItem","fallbackLng","debug","ns","defaultNS","interpolation","escapeValue","formatSeparator","react","wait","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ee1ad94f.chunk.js","sourcesContent":["import React, {\n  useState,\n} from 'react';\nimport { useTranslation } from \"react-i18next\";\n\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Select from '@material-ui/core/Select';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport FormControl from '@material-ui/core/FormControl';\n\nconst Setting = () => {\n  const { t } = useTranslation();\n\n  const [playerNumber, setPlayerNumber] = useState(6);\n  const [wolfNumber, setWolfNumber] = useState(2);\n  const [isUsePredictor, setIsUsePredictor] = useState(false);\n  const [isUseWitch, setIsUseWitch] = useState(false);\n  const [isUseHunter, setIsUseHunter] = useState(false);\n\n  return (\n    <>\n      <div>\n        <TextField\n          label={t('player_number')}\n          // className={classes.textField}\n          value={playerNumber}\n          onChange={(e) => {setPlayerNumber(e.target.value)}}\n          margin=\"normal\"\n        />\n      </div>\n      <div>\n        <TextField\n          label={t('player_number')}\n          // className={classes.textField}\n          value={wolfNumber}\n          onChange={(e) => {setWolfNumber(e.target.value)}}\n          margin=\"normal\"\n        />\n      </div>\n      <div>\n        <InputLabel htmlFor=\"age-native-helper\">{t('predictor')}</InputLabel>\n        <Select\n          color=\"inherit\"\n          native\n          value={isUsePredictor}\n          onChange={(e) => setIsUsePredictor(e.target.value)}\n          inputProps={{\n            name: t('predictor'),\n          }}\n        >\n          <option value={true}>{t('yes')}</option>\n          <option value={false}>{t('no')}</option>\n        </Select>\n      </div>\n      <div>\n        <InputLabel htmlFor=\"age-native-helper\">{t('witch')}</InputLabel>\n        <Select\n          color=\"inherit\"\n          native\n          value={isUseWitch}\n          onChange={(e) => setIsUseWitch(e.target.value)}\n          // inputProps={{\n          //   name: t('predictor'),\n          // }}\n        >\n          <option value={true}>{t('yes')}</option>\n          <option value={false}>{t('no')}</option>\n        </Select>\n      </div>\n      <div>\n        <InputLabel htmlFor=\"age-native-helper\">{t('hunter')}</InputLabel>\n        <Select\n          color=\"inherit\"\n          native\n          value={isUseHunter}\n          onChange={(e) => setIsUseHunter(e.target.value)}\n          // inputProps={{\n          //   name: t('predictor'),\n          // }}\n        >\n          <option value={true}>{t('yes')}</option>\n          <option value={false}>{t('no')}</option>\n        </Select>\n      </div>\n      <Button>{t('start')}</Button>\n    </>\n  );\n};\n\nexport default Setting;\n","import React, {\n  useState,\n} from 'react';\nimport { useTranslation } from \"react-i18next\";\nimport Typography from '@material-ui/core/Typography';\nimport Container from '@material-ui/core/Container';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\n// import Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport Select from '@material-ui/core/Select';\nimport Drawer from '@material-ui/core/Drawer';\nimport Divider from '@material-ui/core/Divider';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\n\nimport AutorenewIcon from '@material-ui/icons/Autorenew';\nimport CachedIcon from '@material-ui/icons/Cached';\n\nimport Setting from '../Setting/Setting';\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles(theme => ({\n  container: {\n    paddingLeft: '0px',\n    paddingRight: '0px',\n  },\n  toolbar: theme.mixins.toolbar,\n  drawer: {\n    width: drawerWidth,\n  },\n  drawerPaper: {\n    width: drawerWidth,\n  },\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n  list: {\n    width: 250,\n  },\n  fullList: {\n    width: 'auto',\n  },\n}));\n\nconst Home = (props) => {\n  const [isOpenDrawer, setIsOpenDrawer] = useState(false);\n  const { t, i18n } = useTranslation();\n  const classes = useStyles();\n\n  const handleChange = (value) => {\n    i18n.changeLanguage(value);\n    // console.log('value', value);\n    // setLanguage(value);\n  }\n\n  const toggleDrawer = (isOpen) => event => {\n    if (event.type === 'keydown' && (event.key === 'Tab' || event.key === 'Shift')) {\n      return;\n    }\n    setIsOpenDrawer(isOpen);\n  };\n\n  const handleRestart = () => {\n    setIsOpenDrawer(false);\n  }\n\n  const handleReSetting = () => {\n    setIsOpenDrawer(false);\n  }\n\n  return (\n    <>\n      <Container maxWidth=\"sm\" className={classes.container}>\n        <Typography component=\"div\" style={{ backgroundColor: '#cfe8fc', height: '100vh' }}>\n          <AppBar position=\"static\">\n            <Toolbar>\n              <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\" onClick={toggleDrawer(true)}>\n                <MenuIcon />\n              </IconButton>\n              <Typography variant=\"h6\" className={classes.title}>\n                { t('title') }\n              </Typography>\n              <Select\n                color=\"inherit\"\n                native\n                // value={language}\n                onChange={(e) => handleChange(e.target.value)}\n                inputProps={{\n                  name: 'age',\n                  id: 'age-native-simple',\n                }}\n              >\n                <option value=\"zh-TW\">繁體中文</option>\n                <option value=\"en-US\">English</option>\n              </Select>\n            </Toolbar>\n          </AppBar>\n          <Drawer\n            anchor=\"left\"\n            open={isOpenDrawer}\n            onClose={toggleDrawer(false)}\n            className={classes.drawer}\n            classes={{\n              paper: classes.drawerPaper,\n            }}\n          >\n            <div className={classes.toolbar} />\n            <Divider />\n            <List>\n              <ListItem button key={t('restart')} onClick={handleRestart}>\n                <ListItemIcon><CachedIcon /></ListItemIcon>\n                <ListItemText primary={t('restart')} />\n              </ListItem>\n              <ListItem button key={t('resetting')} onClick={handleReSetting}>\n                <ListItemIcon><AutorenewIcon /></ListItemIcon>\n                <ListItemText primary={t('resetting')} />\n              </ListItem>\n            </List>\n          </Drawer>\n        \n          <Setting />\n        </Typography>\n      </Container>\n    </>\n  );\n}\n\nexport default Home\n","import i18n from 'i18next';\nimport { initReactI18next } from \"react-i18next\";\n\nimport enUS from './languages/en-US.json';\nimport zhTW from './languages/zh-TW.json';\n\n// console.log('zhTW', zhTW);\n\ni18n\n.use(initReactI18next)\n.init({\n  // we init with resources\n  resources: {\n    'en-US': {\n      translations: enUS,\n    },\n    'zh-TW': {\n      translations: zhTW,\n    },\n  },\n  lng: localStorage.getItem('language') || 'zh-TW',\n  fallbackLng: 'zh-TW',\n  debug: true,\n\n  // have a common namespace used around the full app\n  ns: ['translations'],\n  defaultNS: 'translations',\n\n  // keySeparator: false, // we use content as keys\n\n  interpolation: {\n    escapeValue: false, // not needed for react!!\n    formatSeparator: ',',\n  },\n\n  react: {\n    wait: true,\n  },\n});\n\nexport default i18n;\n","import React from 'react';\n\nimport Home from './components/Home/Home';\n// import logo from './logo.svg';\nimport './App.css';\n// import './styles/styles.css';\n\nimport './locales/index';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Home />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}